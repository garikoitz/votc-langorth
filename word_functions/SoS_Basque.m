% Example name:Basque database 
% Description: this script selects stimuli for the design of Basque material
% The script will find 2 samples of 80 words that are different on frequency 
% matched on bigram frequency, numbers of neibours, length, concretness
% The optimization uses the stochastic method of annealing

clear all; close all; clc;
% Sets the random seed
rng(3456,'twister');

bdir = fullfile(vlRP,'DATA');
odir = fullfile(bdir,'output');

%% READ THIS DATA
% Creates a new population for the high frequency sample in Basque
HighFreqPopulation = population(fullfile(bdir,'Basque high frequency word list final.txt'),...
                                'name','HighFreqPopulation',...
                                'isHeader',true,'isFormatting',true);
                          
% Creates a new population for the low frequency sample
LowFreqPopulation = population(fullfile(bdir,'Basque low frequency word list final.txt'),...
                                'name','LowFreqPopulation',...
                                'isHeader',true,'isFormatting',true);

%% CREATE EMPTY CONTAINERS, TO BE FILLED WITH DATA ABOVE
% Creates a new sample of 80 words for the high frequency condition
HighFreqSample = sample(80,'name','HighFreqSample',...
                      'outFile',fullfile(odir,'BasquehighFreqSampleGREEDY.txt'));

% Creates a new sample of 80 words for the low frequency condition
LowFreqSample = sample(80,'name','LowFreqSample', ...
                      'outFile',fullfile(odir,'BasquelowFreqSampleGREEDY.txt'));

%% Links the samples to the populations from which their items will be drawn
HighFreqSample.setPop(HighFreqPopulation);
LowFreqSample.setPop(LowFreqPopulation);

%% START CREATING SOS optimization object and add our samples
% Creates a new SOS optimization

BasqueSOS = sos('reportInterval',1000, 'statTestReportStyle','full');

% Adds the two samples to the optimization
BasqueSOS.addSample(HighFreqSample);
BasqueSOS.addSample(LowFreqSample);



%% ADD CONSTRAINTS
% Adds a new constraint: maximize the difference pairwise between
% the samples on frequency
freC = BasqueSOS.addConstraint('sosObj', BasqueSOS, ...
                                            'name', 'freC', ...
                                            'constraintType', 'soft',...
                                            'fnc', 'orderedMax', ...
                                            'stat', 'mean', ...
                                            'sample1', LowFreqSample, ...
                                            'sample2', HighFreqSample, ...
                                            's1ColName', 'fre', ...
                                            'S2ColName', 'fre', ...
                                            'exponent', 2, ...
                                            'paired', true, 'weight', 1);

% Adds a new constraint: minimize the differences pairwise between
% the samples on bigram
bigrC = BasqueSOS.addConstraint('sosObj', BasqueSOS, ...
                                            'name','bigrC', ...
                                            'constraintType', 'soft',...
                                            'fnc', 'min', ...
                                            'stat', 'mean', ...
                                            'sample1', HighFreqSample, ...
                                            'sample2', LowFreqSample, ...
                                            's1ColName', 'bigr', ...
                                            'S2ColName', 'bigr', ...
                                            'exponent', 2, ...
                                            'paired', true, 'weight', 1);

% Adds a new constraint: minimize the differences pairwise between
% the samples on length
lC = BasqueSOS.addConstraint('sosObj', BasqueSOS, ...
                                              'name', 'lC', ...
                                              'constraintType', 'soft', ...
                                              'fnc', 'min', ...
                                              'stat', 'mean', ...
                                              'sample1', HighFreqSample, ...
                                              'sample2', LowFreqSample, ...
                                              's1ColName', 'l', ...
                                              'S2ColName', 'l', ...
                                              'exponent', 2, ...
                                              'paired', true, 'weight', 1);

% Adds a new constraint: minimize the differences pairwise between
% the samples on concretness
%concC = BasqueSOS.addConstraint('sosObj', BasqueSOS, ...
                                              %'name', 'lC', ...
                                              %'constraintType', 'soft', ...
                                              %'fnc', 'min', ...
                                              %'stat', 'mean', ...
                                              %'sample1', HighFreqSample, ...
                                              %'sample2', LowFreqSample, ...
                                              %'s1ColName', 'l', ...
                                              %'S2ColName', 'l', ...
                                              %'exponent', 2, ...
                                              %'paired', true, 'weight', 1);

% Adds a new constraint: minimize the differences pairwise between
% the samples on neighbour
neigC = BasqueSOS.addConstraint('sosObj', BasqueSOS, ...
                                              'name', 'neigC', ...
                                              'constraintType', 'soft', ...
                                              'fnc', 'min', ...
                                              'stat', 'mean', ...
                                              'sample1', HighFreqSample, ...
                                              'sample2', LowFreqSample, ...
                                              's1ColName', 'neig', ...
                                              'S2ColName', 'neig', ...
                                              'exponent', 2, ...
                                              'paired', true, 'weight', 1);

% Adds a new meta constraint to ensure that differences on frequency
% are maximized only when the concretness difference has been minimized
%metaConcAndFreConstraint = BasqueSOS.addConstraint('name', 'metaConcAndFreConstraint', ...
                                      %'constraintType', 'meta', ...
                                      %'fnc', 'matchCostNotMin', ...
                                      % 'constraint1', concC, ...
                                      % 'constraint2', freC,...
                                      % 'constraint2costScale', 1.0, ...
                                      % 'weight', 1, 'exponent', 2.0);

% Adds a new meta constraint to ensure that differences on frequency 
% are maximized only when the length difference has been minimized
metaLAndFreConstraint = BasqueSOS.addConstraint('name', 'metaLAndFreConstraint', ...
                                      'constraintType', 'meta', ...
                                      'fnc', 'matchCostNotMin', ...
                                      'constraint1', lC, ...
                                      'constraint2', freC, ...
                                      'constraint2costScale', 1.0, ...
                                      'weight', 1, 'exponent', 2.0);

% Adds a new meta constraint to ensure that differences on frequency 
% are maximized only when the Bigram difference has been minimized
metaBirAndFreConstraint = BasqueSOS.addConstraint('name', 'metaBigrAndFreConstraint', ...
                                     'constraintType', 'meta', ...
                                     'fnc', 'matchCostNotMin', ...
                                     'constraint1', bigrC, ...
                                     'constraint2', freC,...
                                     'constraint2costScale', 1.0, ...
                                     'weight', 1, 'exponent', 2.0);
% Add constraints finished

%% RUN SoS
% Fills the samples with items selected radomly from the population
BasqueSOS.initFillSamples();

% Normalizes the values of the dimensions of interest
BasqueSOS.normalizeData();

% Creates a paired samples t-test; test "passes" if 
% frequency differs between the samples, p < .05 

BasqueSOS.addttest('name', 'frequencyTest', ...
                      'type', 'paired', ...
                      'sample1', HighFreqSample, ...
                      'sample2', HighFreqSample, ...
                      's1ColName', 'fre', ...
                      's2ColName', 'fre', ...
                      'desiredpvalCondition', '<=', 'desiredpval',.05);

% Creates a paired samples t-test; test "passes" if 
% length is matched between the samples, p > .5 
BasqueSOS.addttest('name', 'lengthTest', ...
                      'type', 'paired', ...
                      'sample1', HighFreqSample, ...
                      'sample2', LowFreqSample, ...
                      's1ColName', 'l', ...
                      's2ColName', 'l', ...
                      'desiredpvalCondition', '=>', 'desiredpval', .5);

% Creates a paired samples t-test; test "passes" if
% Bigram is matched between the samples, p > .5
BasqueSOS.addttest('name', 'BigramTest', ...
                      'type', 'paired', ...
                      'sample1', HighFreqSample, ...
                      'sample2', LowFreqSample, ...
                      's1ColName', 'bigr', ...
                      's2ColName', 'bigr', ...
                      'desiredpvalCondition', '=>', 'desiredpval', 0.5);

% Creates a paired samples t-test; test "passes" if 
% concretness is matched between the samples, p > .5
%BasqueSOS.addttest('name', 'ConcretnessTest', ...
                      %'type', 'paired', ...
                      %'sample1', HighFreqSample, ...
                      %'sample2', LowFreqSample, ...
                      %'s1ColName', 'conc', ...
                      %'s2ColName', 'conc', ...
                      %'desiredpvalCondition', '=>', 'desiredpval', 0.5);
                  
% Creates a paired samples t-test; test "passes" if 
% neighours is matched between the samples, p > .5
BasqueSOS.addttest('name', 'NeighbourTest', ...
                      'type', 'paired', ...
                      'sample1', HighFreqSample, ...
                      'sample2', LowFreqSample, ...
                      's1ColName', 'neig', ...
                      's2ColName', 'neig', ...
                      'desiredpvalCondition', '=>', 'desiredpval', 0.5);                

% Specifies the type of optimization
BasqueSOS.setAnnealSchedule('schedule','exp', ...
                               'pDecrease', .402508);

% Increases the maximum number of interations from the default
BasqueSOS.maxIt = 1000000;


 %% Starts the optimization process automatically
 % (this is the important one, in your example it was not called mySOS,
 % it had another name, change it here)
 BasqueSOS.optimize('isGui',0);
    

 % Write Sample data files: same here, edit the names
 HighFreqSample.writeData();
 LowFreqSample.writeData();