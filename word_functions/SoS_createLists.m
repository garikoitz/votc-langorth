function [] = SoS_createLists(lang,bdir,odir,minFrequ,maxFrequ)

% SoS_createLists Launch SoS with options
%{
    langs     = {'ES','EN','EU'};
    bdir      = fullfile(vlRP,'DATA');
    odir      = fullfile(bdir,'output');
    minFrequs = [20,40,40]; % if it is cero, ignore.
    maxFrequs = [500,500,500]; % if it is cero, ignore. 
    
    for nl=1:length(langs) 
        SoS_createLists(langs{nl},bdir,odir,minFrequs(nl),maxFrequs(nl))
    end
    
    % Obtain means
    VWFA_CalculateWordMeans

    % Obtain just words
    words = dir(fullfile(odir,'RW_*80.txt'));
    for ii=1:length(words)
        thislist = readtable(fullfile(odir,words(ii).name),'HeaderLines', 0,'ReadRowNames',false);
        thislist.words_s = categorical(thislist.words_s);
        writematrix(thislist.words_s,strrep(fullfile(odir,words(ii).name),'.txt','_justwords.txt'))
    end
%}





% Example name:English database 
% Description: this script selects stimuli for the design of Basque material
% The script will find 2 samples of 80 words that are different on frequency 
% matched on bigram frequency, numbers of neibours, length, concretness
% The optimization uses the stochastic method of annealing

% clear all; close all; clc;
addpath(genpath('~/soft/SOS'));
% Sets the random seed
rng(3456,'twister');


if ~isfolder(odir); mkdir(odir); end

%% READ THIS DATA
% Creates a new population for the high frequency sample in Basque
% HighFreqPopulation = population(fullfile(bdir,'English high frequency final.txt'),...
%                                 'name','HighFreqPopulation',...
%                                 'isHeader',true,'isFormatting',true);
                          
% Creates a new population for the low frequency sample
% LowFreqPopulation = population(fullfile(bdir,'English low frequency final.txt'),...
%                                 'name','LowFreqPopulation',...
%                                 'isHeader',true,'isFormatting',true);


% It seems that if we use the 4 freq as minimum, the mean is mlower than in
% chinese. Remove the words with lower than 40 and re-run. 

% Run this one to filter the file
if minFrequ ~= 0 || maxFrequ ~= 0
    A = readtable(fullfile(bdir,[lang '_sos.txt']));
    if minFrequ ~= 0; A = A(A.fre_f>=minFrequ,:); end
    if maxFrequ ~= 0; A = A(A.fre_f<=maxFrequ,:); end
    A.Properties.VariableNames = strrep(A.Properties.VariableNames,'_','|');
    writetable(A, fullfile(bdir,[lang '_sos_reduced.txt']),'Delimiter','\t');
    AllPop = population(fullfile(bdir,[lang '_sos_reduced.txt']),...
                                'name','AllPop',...
                                'isHeader',true,'isFormatting',true);
else
    AllPop = population(fullfile(bdir,[lang '_sos.txt']),...
                                'name','AllPop',...
                                'isHeader',true,'isFormatting',true);                       
end                            


%% CREATE EMPTY CONTAINERS, TO BE FILLED WITH DATA ABOVE
% Creates a new sample of 80 words for the high frequency condition
AllPop_CB1 = sample(80,'name','AllPop_CB1',...
                      'outFile',fullfile(odir,['RW_' lang '_CB1_80.txt']));

% Creates a new sample of 80 words for the low frequency condition
AllPop_CB2 = sample(80,'name','AllPop_CB2', ...
                      'outFile',fullfile(odir,['RW_' lang '_CB2_80.txt']));

%% Links the samples to the populations from which their items will be drawn
AllPop_CB1.setPop(AllPop);
AllPop_CB2.setPop(AllPop);

%% START CREATING SOS optimization object and add our samples
% Creates a new SOS optimization

LangSOS = sos('reportInterval',1000, 'statTestReportStyle','full');

% Adds the two samples to the optimization
LangSOS.addSample(AllPop_CB1);
LangSOS.addSample(AllPop_CB2);



%% ADD CONSTRAINTS
% Adds a new constraint: minimize the difference pairwise between
% the samples on frequency
freC = LangSOS.addConstraint('sosObj', LangSOS, ...
                                            'name', 'freC', ...
                                            'constraintType', 'soft',...
                                            'fnc', 'min', ...
                                            'stat', 'mean', ...
                                            'sample1', AllPop_CB1, ...
                                            'sample2', AllPop_CB2, ...
                                            's1ColName', 'fre', ...
                                            's2ColName', 'fre', ...
                                            'exponent', 2, ...
                                            'paired', true, 'weight', 1);
% Adds one desired constraint with the name 'myConstraint2': 'KFfrequency' values in mySample1 must be greater than 100
% freCmean1f = LangSOS.addConstraint('sosObj',LangSOS,'name','freCmean1f',...
%                                             'constraintType','hard',...
%                                             'fnc','floor',...
%                                             'sample1',AllPop_CB1,...
%                                             's1ColName','fre',...
%                                             'value',4);
% freCmean1c = LangSOS.addConstraint('sosObj',LangSOS,'name','freCmean1c',...
%                                             'constraintType','hard',...
%                                             'fnc','ceiling',...
%                                             'sample1',AllPop_CB1,...
%                                             's1ColName','fre',...
%                                             'value',700);                                        
% freCmean2f = LangSOS.addConstraint('sosObj',LangSOS,'name','freCmean1f',...
%                                             'constraintType','hard',...
%                                             'fnc','floor',...
%                                             'sample1',AllPop_CB1,...
%                                             's1ColName','fre',...
%                                             'value',50);
% freCmean2c = LangSOS.addConstraint('sosObj',LangSOS,'name','freCmean2c',...
%                                             'constraintType','hard',...
%                                             'fnc','ceiling',...
%                                             'sample1',AllPop_CB2,...
%                                             's1ColName','fre',...
%                                             'value',700);


% Adds a new constraint: minimize the differences pairwise between
% the samples on bigram
bigrC = LangSOS.addConstraint('sosObj', LangSOS, ...
                                            'name','bigrC', ...
                                            'constraintType', 'soft',...
                                            'fnc', 'min', ...
                                            'stat', 'mean', ...
                                            'sample1', AllPop_CB1, ...
                                            'sample2', AllPop_CB2, ...
                                            's1ColName', 'bigr', ...
                                            'S2ColName', 'bigr', ...
                                            'exponent', 2, ...
                                            'paired', true, 'weight', 1);

% Adds a new constraint: minimize the differences pairwise between
% the samples on length
lC = LangSOS.addConstraint('sosObj', LangSOS, ...
                                              'name', 'lC', ...
                                              'constraintType', 'soft', ...
                                              'fnc', 'min', ...
                                              'stat', 'mean', ...
                                              'sample1', AllPop_CB1, ...
                                              'sample2', AllPop_CB2, ...
                                              's1ColName', 'l', ...
                                              'S2ColName', 'l', ...
                                              'exponent', 2, ...
                                              'paired', true, 'weight', 1);

% Adds a new constraint: minimize the differences pairwise between
% the samples on concretness
if strcmp(lang,'EN')
    concC = LangSOS.addConstraint('sosObj', LangSOS, ...
                                              'name', 'concC', ...
                                              'constraintType', 'soft', ...
                                              'fnc', 'min', ...
                                              'stat', 'mean', ...
                                              'sample1', AllPop_CB1, ...
                                              'sample2', AllPop_CB2, ...
                                              's1ColName', 'conc', ...
                                              'S2ColName', 'conc', ...
                                              'exponent', 2, ...
                                              'paired', true, 'weight', 1);
end
% Adds a new constraint: minimize the differences pairwise between
% the samples on neighbour
neigC = LangSOS.addConstraint('sosObj', LangSOS, ...
                                              'name', 'neigC', ...
                                              'constraintType', 'soft', ...
                                              'fnc', 'min', ...
                                              'stat', 'mean', ...
                                              'sample1', AllPop_CB1, ...
                                              'sample2', AllPop_CB2, ...
                                              's1ColName', 'neig', ...
                                              'S2ColName', 'neig', ...
                                              'exponent', 2, ...
                                              'paired', true, 'weight', 1);

% Adds a new meta constraint to ensure that differences on frequency
% are maximized only when the concretness difference has been minimized
if strcmp(lang,'EN')
    metaConcAndFreConstraint = LangSOS.addConstraint('name', 'metaConcAndFreConstraint', ...
                                      'constraintType', 'meta', ...
                                      'fnc', 'matchCostNotMin', ...
                                      'constraint1', concC, ...
                                      'constraint2', freC,...
                                      'constraint2costScale', 1.0, ...
                                      'weight', 1, 'exponent', 2.0);
end
% Adds a new meta constraint to ensure that differences on frequency 
% are maximized only when the length difference has been minimized
metaLAndFreConstraint = LangSOS.addConstraint('name', 'metaLAndFreConstraint', ...
                                      'constraintType', 'meta', ...
                                      'fnc', 'matchCostNotMin', ...
                                      'constraint1', lC, ...
                                      'constraint2', freC, ...
                                      'constraint2costScale', 1.0, ...
                                      'weight', 1, 'exponent', 2.0);

% Adds a new meta constraint to ensure that differences on frequency 
% are maximized only when the Bigram difference has been minimized
metaBirAndFreConstraint = LangSOS.addConstraint('name', 'metaBigrAndFreConstraint', ...
                                     'constraintType', 'meta', ...
                                     'fnc', 'matchCostNotMin', ...
                                     'constraint1', bigrC, ...
                                     'constraint2', freC,...
                                     'constraint2costScale', 1.0, ...
                                     'weight', 1, 'exponent', 2.0);
% Add constraints finished

%% RUN SoS
% Fills the samples with items selected radomly from the population
LangSOS.initFillSamples();

% Normalizes the values of the dimensions of interest
LangSOS.normalizeData();

% Creates a paired samples t-test; test "passes" if 
% frequency differs between the samples, p > .5

LangSOS.addttest('name', 'frequencyTest', ...
                      'type', 'paired', ...
                      'sample1', AllPop_CB1, ...
                      'sample2', AllPop_CB2, ...
                      's1ColName', 'fre', ...
                      's2ColName', 'fre', ...
                      'desiredpvalCondition', '=>', 'desiredpval',.5);               

% Creates a paired samples t-test; test "passes" if 
% length is matched between the samples, p > .5 
LangSOS.addttest('name', 'lengthTest', ...
                      'type', 'paired', ...
                      'sample1', AllPop_CB1, ...
                      'sample2', AllPop_CB2, ...
                      's1ColName', 'l', ...
                      's2ColName', 'l', ...
                      'desiredpvalCondition', '=>', 'desiredpval', .5);

% Creates a paired samples t-test; test "passes" if
% Bigram is matched between the samples, p > .5
LangSOS.addttest('name', 'BigramTest', ...
                      'type', 'paired', ...
                      'sample1', AllPop_CB1, ...
                      'sample2', AllPop_CB2, ...
                      's1ColName', 'bigr', ...
                      's2ColName', 'bigr', ...
                      'desiredpvalCondition', '=>', 'desiredpval', 0.5);

% Creates a paired samples t-test; test "passes" if 
% concretness is matched between the samples, p > .5
if strcmp(lang,'EN')
    LangSOS.addttest('name', 'ConcretnessTest', ...
                      'type', 'paired', ...
                      'sample1', AllPop_CB1, ...
                      'sample2', AllPop_CB2, ...
                      's1ColName', 'conc', ...
                      's2ColName', 'conc', ...
                      'desiredpvalCondition', '=>', 'desiredpval', 0.5);
end

% Creates a paired samples t-test; test "passes" if 
% neighours is matched between the samples, p > .5
LangSOS.addttest('name', 'NeighbourTest', ...
                      'type', 'paired', ...
                      'sample1', AllPop_CB1, ...
                      'sample2', AllPop_CB2, ...
                      's1ColName', 'neig', ...
                      's2ColName', 'neig', ...
                      'desiredpvalCondition', '=>', 'desiredpval', 0.5);                

% Specifies the type of optimization
LangSOS.setAnnealSchedule('schedule','exp', ...
                               'pDecrease', .402508);

% Increases the maximum number of interations from the default
LangSOS.maxIt = 1000000;


     %% Starts the optimization process automatically
     % (this is the important one, in your example it was not called mySOS,
     % it had another name, change it here)
     LangSOS.optimize('isGui',0);


     % Write Sample data files: same here, edit the names
     AllPop_CB1.writeData();
     AllPop_CB2.writeData();
end